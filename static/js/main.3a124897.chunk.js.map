{"version":3,"sources":["movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","loading","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0TAgDeA,MA3Cf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,yBACEA,UAAU,gBACVC,IAAKH,EACLI,IAAKN,EACLA,MAAOA,EACPO,QAAQ,SAEV,yBAAKH,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBAIVD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACT,wBAAIC,IAAKD,EAAON,UAAU,iBACvBK,OAQT,uBAAGL,UAAU,kBAAkBH,EAAQW,MAAM,EAAG,KAAhD,UCwDOC,G,kNAjEbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAMVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZM,QAAQC,IAAIP,GAGZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAXzB,2C,kEAqBVU,KAAKR,c,+BAGG,IAAD,EACuBQ,KAAKX,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OAEE,6BAASZ,UAAU,aAChBW,EACC,yBAAKX,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZY,EAAOR,KAAI,SAAAkB,GAAK,OAEf,kBAAC,EAAD,CAIEf,IAAKe,EAAMC,GACXA,GAAID,EAAMC,GACV5B,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAME,mBACdzB,OAAQuB,EAAMvB,kB,GAxDZ0B,IAAMC,YCZxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3a124897.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// 컴포넌트에 state가 필요 없으면 className 컴포넌트일 필요가 없다.\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img\r\n        className=\"movie__poster\"\r\n        src={poster}\r\n        alt={title}\r\n        title={title}\r\n        loading=\"lazy\"\r\n      />\r\n      <div className=\"movie__date\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {\r\n            // map 에는 key가 필요하기 때문에 movies 의 id가 아닌\r\n            // map을 이용한 genres에 index 값을 지정하여 key값으로 사용\r\n            genres.map((genre, index) => (\r\n              <li key={index} className=\"genres__genre\">\r\n                {genre}\r\n              </li>\r\n            ))\r\n          }\r\n        </ul>\r\n        {\r\n          // array 에서 텍스트를 자르는 방법. .slice(시작자리, 끝자리)\r\n        }\r\n        <p className=\"movie__summary\">{summary.slice(0, 100)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Movie에 우리가 필요한 propTypes을 정해준다.\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./movie\";\nimport \"./App.css\";\n//JSX , prop-types\n// 리액트는 자동으로 클래스 컴포넌트의 render 메소드를 실행한다.\n// 펑션컴포넌트를 사용안하고 클래스 컴포넌트를 사용하는 이유는 state 때문이다.\n// state는 오브젝트며 컴포넌트의 데이터를 넣을 공간이 있고 데이터는 변할수있다.\n// setState를 호출할 때 마다 리액트는 새로운 state와 함께 렌더 함수를 호출한다.\n\n// React.Component의 life cycle.\n\n// Mounting 순서. 생겨나는것. 살아있는것.\n// constructor()\n// render()\n// componentDidMount()\n\n// Update 순서. (setState와 같은 업데이트 발생 시) 변하는 것.\n// render()\n// componentDidUpdate()\n\n// componentWillUnmount() 끊는 함수.\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n  // axios는 fatch함수 위에 있는 작은 layer다.\n  // axios는 HTTP 클라이언트 라이브러리로써, 비동기 방식으로 HTTP 데이터 요청을 실행합니다.\n  // axios를 사용해서 url에 있는 데이터를 setState 한다.\n  // axios는 느리기떄문에 async await를 사용해서 처리가 될때까지 기다린다.\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    console.log(movies);\n\n    // 추출한 movies 를 state에 set 한다.\n    this.setState({ movies, isLoading: false });\n  };\n\n  componentDidMount() {\n    // // render 다음으로 componentDidMount 출력\n    // //setTimeout은 JS 함수. 5초 뒤에 함수 실행.\n    // setTimeout(()=>{\n    //   this.setState({ isLoading:false })\n    // }, 5000);\n\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state; // this.state.isLoading 과 같다.\n    return (\n      // JS class 안에 JSX에 대한 class가 혼란을 주기때문에 className이라고 지정해준다.\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              // map은 무조건 key와 리턴이 있어야한다.\n              <Movie\n                //데이터에 있는 고유의 값으로 key를 정해줘야한다.\n                //movies.js 에서 받아온 prop 타입을 토대로 state에 있는\n                // movies[] 값들을 배열에 내장함수 .map을 사용해서 넣어준다.\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// 리엑트가 빠른 이유. ReactDom.render로 index.html에\n// 있는 root에 html을 처리하기 때문에 소스코드가 보이지 않는다.\n// 컴포넌트(App)는 HTML을 반환하는 함수. JSX 라고 한다.\n// 컴포넌트는 한번에 하나만 부를수 있으니 추가적인 컴포넌트는\n// App.js에 임포트하여 추가한다.\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}