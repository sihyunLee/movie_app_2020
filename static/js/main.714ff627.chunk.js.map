{"version":3,"sources":["components/Navigation.js","routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","App.js","index.js"],"names":["Navigation","className","to","About","Movie","id","year","title","summary","poster","genres","pathname","state","src","alt","loading","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","Detail","props","location","history","undefined","push","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"8TAaeA,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCISC,G,MAVD,kBACZ,yBAAKF,UAAU,oBACb,8IAIA,+D,gFCsDWG,MAxDf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,kBAAC,IAAD,CACER,GAAI,CACFS,SAAS,UAAD,OAAYN,GACpBO,MAAO,CACLN,OACAC,QACAC,UACAC,SACAC,YAIJ,yBAAKT,UAAU,SACb,yBACEA,UAAU,gBACVY,IAAKJ,EACLK,IAAKP,EACLA,MAAOA,EACPQ,QAAQ,SAEV,yBAAKd,UAAU,eACb,wBAAIA,UAAU,gBAAgBM,GAC9B,wBAAIN,UAAU,eAAeK,GAC7B,wBAAIL,UAAU,iBAIVS,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACT,wBAAIC,IAAKD,EAAOjB,UAAU,iBACvBgB,OAQT,uBAAGhB,UAAU,kBAAkBO,EAAQY,MAAM,EAAG,KAAhD,WCqCKC,G,kNA3DbT,MAAQ,CACNU,WAAW,EACXC,OAAQ,I,EAMVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZM,QAAQC,IAAIP,GAGZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAXzB,2C,kEAeVU,KAAKR,c,+BAGG,IAAD,EACuBQ,KAAKpB,MAA3BU,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OAEE,6BAAStB,UAAU,aAChBqB,EACC,yBAAKrB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZsB,EAAOP,KAAI,SAAAiB,GAAK,OAEf,kBAAC,EAAD,CAIEd,IAAKc,EAAM5B,GACXA,GAAI4B,EAAM5B,GACVC,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAMC,mBACdxB,OAAQuB,EAAMvB,kB,GAlDXyB,IAAMC,YCJVC,E,kLAdXR,QAAQC,IAAIE,KAAKM,OADC,MAEYN,KAAKM,MAA3BC,EAFU,EAEVA,SAAUC,EAFA,EAEAA,aACKC,IAAnBF,EAAS3B,OACX4B,EAAQE,KAAK,O,+BAGP,IACAH,EAAaP,KAAKM,MAAlBC,SACR,OAAIA,EAAS3B,MACJ,6BAAM2B,EAAS3B,MAAML,OAChB,S,GAZG4B,IAAMC,W,MCmBZO,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWxB,EAAMyB,OAAO,IACxC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAW1C,IAChC,kBAAC,IAAD,CAAOyC,KAAK,aAAaC,UAAWR,MCN1CU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.714ff627.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./About.css\";\r\nconst About = () => (\r\n  <div className=\"about__container\">\r\n    <span>\r\n      “Freedom is the freedom to say that two plus two make four. If that is\r\n      granted, all else follows.”\r\n    </span>\r\n    <span>− George Orwell, 1984</span>\r\n  </div>\r\n);\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// 컴포넌트에 state가 필요 없으면 className 컴포넌트일 필요가 없다.\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <Link\r\n      to={{\r\n        pathname: `/movie/${id}`,\r\n        state: {\r\n          year,\r\n          title,\r\n          summary,\r\n          poster,\r\n          genres,\r\n        },\r\n      }}\r\n    >\r\n      <div className=\"movie\">\r\n        <img\r\n          className=\"movie__poster\"\r\n          src={poster}\r\n          alt={title}\r\n          title={title}\r\n          loading=\"lazy\"\r\n        />\r\n        <div className=\"movie__date\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {\r\n              // map 에는 key가 필요하기 때문에 movies 의 id가 아닌\r\n              // map을 이용한 genres에 index 값을 지정하여 key값으로 사용\r\n              genres.map((genre, index) => (\r\n                <li key={index} className=\"genres__genre\">\r\n                  {genre}\r\n                </li>\r\n              ))\r\n            }\r\n          </ul>\r\n          {\r\n            // array 에서 텍스트를 자르는 방법. .slice(시작자리, 끝자리)\r\n          }\r\n          <p className=\"movie__summary\">{summary.slice(0, 100)}...</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\n// Movie에 우리가 필요한 propTypes을 정해준다.\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n//JSX , prop-types\r\n// 리액트는 자동으로 클래스 컴포넌트의 render 메소드를 실행한다.\r\n// 펑션컴포넌트를 사용안하고 클래스 컴포넌트를 사용하는 이유는 state 때문이다.\r\n// state는 오브젝트며 컴포넌트의 데이터를 넣을 공간이 있고 데이터는 변할수있다.\r\n// setState를 호출할 때 마다 리액트는 새로운 state와 함께 렌더 함수를 호출한다.\r\n\r\n// React.Component의 life cycle.\r\n\r\n// Mounting 순서. 생겨나는것. 살아있는것.\r\n// constructor()\r\n// render()\r\n// componentDidMount()\r\n\r\n// Update 순서. (setState와 같은 업데이트 발생 시) 변하는 것.\r\n// render()\r\n// componentDidUpdate()\r\n\r\n// componentWillUnmount() 끊는 함수.\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n  // axios는 fatch함수 위에 있는 작은 layer다.\r\n  // axios는 HTTP 클라이언트 라이브러리로써, 비동기 방식으로 HTTP 데이터 요청을 실행합니다.\r\n  // axios를 사용해서 url에 있는 데이터를 setState 한다.\r\n  // axios는 느리기떄문에 async await를 사용해서 처리가 될때까지 기다린다.\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n    );\r\n    console.log(movies);\r\n\r\n    // 추출한 movies 를 state에 set 한다.\r\n    this.setState({ movies, isLoading: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, movies } = this.state; // this.state.isLoading 과 같다.\r\n    return (\r\n      // JS class 안에 JSX에 대한 class가 혼란을 주기때문에 className이라고 지정해준다.\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map(movie => (\r\n              // map은 무조건 key와 리턴이 있어야한다.\r\n              <Movie\r\n                //데이터에 있는 고유의 값으로 key를 정해줘야한다.\r\n                //movies.js 에서 받아온 prop 타입을 토대로 state에 있는\r\n                // movies[] 값들을 배열에 내장함수 .map을 사용해서 넣어준다.\r\n                key={movie.id}\r\n                id={movie.id}\r\n                year={movie.year}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nclass Detail extends React.Component {\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    const { location, history } = this.props;\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n  render() {\r\n    const { location } = this.props;\r\n    if (location.state) {\r\n      return <div>{location.state.title}</div>;\r\n    } else return null;\r\n  }\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nimport \"./App.css\";\n\n// exact={true}는 \"/\" 만 처리가 되게 하는 것.\n// exact 를 하지 않으면 /about 했을때 / 도 읽기때문.\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" component={Home} exact={true}></Route>\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// 리엑트가 빠른 이유. ReactDom.render로 index.html에\n// 있는 root에 html을 처리하기 때문에 소스코드가 보이지 않는다.\n// 컴포넌트(App)는 HTML을 반환하는 함수. JSX 라고 한다.\n// 컴포넌트는 한번에 하나만 부를수 있으니 추가적인 컴포넌트는\n// App.js에 임포트하여 추가한다.\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}